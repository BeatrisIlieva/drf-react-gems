# Generated by Django 5.2.1 on 2025-07-05 10:52

import cloudinary.models
import django.core.validators
import django.db.models.deletion
import src.accounts.managers.user_credential
import src.accounts.validators.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with this email already exists.'}, max_length=254, unique=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with this username already exists.'}, max_length=150, unique=True, validators=[src.accounts.validators.models.UsernameValidator()])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', src.accounts.managers.user_credential.UserCredentialManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPhoto',
            fields=[
                ('photo', cloudinary.models.CloudinaryField(default='image/upload/v1750959197/user-1699635_1280_z3dgxn.png', max_length=255, null=True, verbose_name='image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('first_name', models.CharField(max_length=30, null=True, validators=[django.core.validators.MinLengthValidator(2), src.accounts.validators.models.NameValidator()])),
                ('last_name', models.CharField(max_length=30, null=True, validators=[django.core.validators.MinLengthValidator(2), src.accounts.validators.models.NameValidator()])),
                ('phone_number', models.CharField(max_length=15, null=True, validators=[django.core.validators.MinLengthValidator(9), src.accounts.validators.models.OnlyDigitsValidator()])),
                ('country', models.CharField(max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(2), src.accounts.validators.models.NameValidator()])),
                ('city', models.CharField(max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(2), src.accounts.validators.models.NameValidator()])),
                ('zip_code', models.CharField(max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(3)])),
                ('street_address', models.CharField(max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('apartment', models.CharField(blank=True, max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
